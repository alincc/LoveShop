{"version":3,"sources":["../../src/spa/+screens/AppInforManagement/faq/faq.module.ts","../../src/spa/+screens/AppInforManagement/faq/faq.ts","../../src/spa/+screens/AppInforManagement/faq/faq.service.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;AAAyC;AACO;AAChB;AAOhC;IAAA;IAA6B,CAAC;IAAjB,aAAa;QALzB,uEAAQ,CAAC;YACR,YAAY,EAAE,CAAC,qDAAO,CAAC;YACvB,OAAO,EAAE,CAAC,sEAAe,CAAC,QAAQ,CAAC,qDAAO,CAAC,CAAC;YAC5C,OAAO,EAAE,CAAC,qDAAO,CAAC;SACnB,CAAC;OACW,aAAa,CAAI;IAAD,oBAAC;CAAA;AAAJ;;;;;;;;;;;;;;;;;;;;;;;;;ACTc;AACM;AACmC;AACoC;AACnB;AACzD;AAUzC;IAGE,iBAAmB,OAAsB,EACtB,aAAkC,EAClC,UAAsB,EACtB,IAAiB;QAHjB,YAAO,GAAP,OAAO,CAAe;QACtB,kBAAa,GAAb,aAAa,CAAqB;QAClC,eAAU,GAAV,UAAU,CAAY;QACtB,SAAI,GAAJ,IAAI,CAAa;IAEpC,CAAC;IAED,kCAAgB,GAAhB;QACE,EAAE,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,oCAAoC,EAAE,KAAK,KAAK,CAAC,CAAC,CAAC;YACxE,IAAI,CAAC,UAAU,EAAE,CAAC;QACpB,CAAC;IACH,CAAC;IAED,4BAAU,GAAV;QAAA,iBAsBC;QArBC,qIAAuB,CAAC,WAAW,EAAE,CAAC,oBAAoB,EAAE,CAAC;QAC7D,IAAM,QAAQ,GAAG;YACf,IAAI,EAAE,UAAC,GAAG;gBACR,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;oBACZ,MAAM,CAAC;gBACT,CAAC;gBACD,EAAE,CAAC,CAAC,GAAG,IAAI,GAAG,CAAC,QAAQ,IAAI,GAAG,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,CAAC;oBAChD,IAAI,IAAI,GAAG,GAAG,CAAC,QAAQ,CAAC;oBACxB,KAAI,CAAC,WAAW,GAAG,IAAI,CAAC,OAAO,CAAC;gBAClC,CAAC;YACH,CAAC;YACD,KAAK,EAAE,UAAC,KAAK;gBACX,qIAAuB,CAAC,WAAW,EAAE,CAAC,oBAAoB,EAAE,CAAC;YAC/D,CAAC;YACD,QAAQ,EAAE;gBACR,qIAAuB,CAAC,WAAW,EAAE,CAAC,oBAAoB,EAAE,CAAC;YAC/D,CAAC;SACF,CAAC;QACF,IAAI,CAAC,UAAU;aACZ,MAAM,EAAE;aACR,SAAS,CAAC,QAAQ,CAAC,CAAC;IACzB,CAAC;IAtCU,OAAO;QAPnB,wEAAS,CAAC;YACT,QAAQ,EAAE,UAAU;YACpB,WAAW,CAAY;YACvB,oEAAW;aACC;WACX;SACF,CAAC;+HAIyC;YACP,iEAAmB;YACtB,iGAAU;YAChB,IAAW;OANzB,OAAO,CAwCnB;IAAD,CAAC;AAAA;SAxCY,OAAO,e;;;;;;;;;;;;;;;;;;;;ACfqB;AAEwC;AAGjF;IACE,oBAAoB,IAAiB;QAAjB,SAAI,GAAJ,IAAI,CAAa;IACrC,CAAC;IAED,2BAAM,GAAN;QACE,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,CAAC,+BAA+B,CAAC,CAAC;IACxD,CAAC;IANU,UAAU;QADtB,yEAAU,EAAE;yCAEe,iGAAW;OAD1B,UAAU,CAQtB;IAAD,iBAAC;CAAA;AARsB","file":"80.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { IonicPageModule } from 'ionic-angular';\nimport { FAQPage } from './faq';\n\n@NgModule({\n  declarations: [FAQPage],\n  imports: [IonicPageModule.forChild(FAQPage)],\n  exports: [FAQPage]\n})\nexport class FAQPageModule { }\n\n\n\n// WEBPACK FOOTER //\n// ./src/spa/+screens/AppInforManagement/faq/faq.module.ts","import {Component} from '@angular/core';\nimport {NavController, IonicPage} from 'ionic-angular';\nimport {HttpService} from \"../../../framework/services/httpService/http.service\";\nimport {LoadingIndicatorService} from \"../../../framework/services/loadingIndicatorService/loadingIndicator.service\";\nimport {RouteManagerService} from \"../../../framework/services/routeManager/routeManager.service\";\nimport {FAQService} from \"./faq.service\";\n\n@IonicPage()\n@Component({\n  selector: 'page-faq',\n  templateUrl: 'faq.html',\n  providers: [\n    FAQService\n  ]\n})\nexport class FAQPage {\n  textContent: any;\n\n  constructor(public navCtrl: NavController,\n              public routerManager: RouteManagerService,\n              public faqService: FAQService,\n              public http: HttpService) {\n\n  }\n\n  ionViewWillEnter() {\n    if (this.routerManager.ifNotLoggedInThenGoBackToLoginScreen() === false) {\n      this.getContent();\n    }\n  }\n\n  getContent() {\n    LoadingIndicatorService.getInstance().showLoadingIndicator();\n    const observer = {\n      next: (res) => {\n        if (!res.ok) {\n          return;\n        }\n        if (res && res.response && res.response.message) {\n          let body = res.response;\n          this.textContent = body.message;\n        }\n      },\n      error: (error) => {\n        LoadingIndicatorService.getInstance().hideLoadingIndicator();\n      },\n      complete: () => {\n        LoadingIndicatorService.getInstance().hideLoadingIndicator();\n      }\n    };\n    this.faqService\n      .getfaq()\n      .subscribe(observer);\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/spa/+screens/AppInforManagement/faq/faq.ts","import {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {HttpService} from \"../../../framework/services/httpService/http.service\";\n\n@Injectable()\nexport class FAQService {\n  constructor(private http: HttpService) {\n  }\n\n  getfaq(): Observable<any> {\n    return this.http.get(\"cms/message/code=app.l2s.faqs\");\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/spa/+screens/AppInforManagement/faq/faq.service.ts"],"sourceRoot":""}