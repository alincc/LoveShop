{"version":3,"sources":["../../src/spa/+screens/AccountManagement/changePassword/changePassword.module.ts","../../src/spa/framework/validations/validator-password.directive.ts","../../src/spa/+screens/AccountManagement/changePassword/changePassword.ts","../../src/spa/+screens/AccountManagement/changePassword/changePassword.service.ts","../../src/spa/framework/validations/validator-passwordMatch.directive.ts"],"names":[],"mappings":"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","file":"42.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { IonicPageModule } from 'ionic-angular';\nimport { ChangePasswordPage } from './changePassword';\n\n@NgModule({\n  declarations: [ChangePasswordPage],\n  imports: [IonicPageModule.forChild(ChangePasswordPage)],\n  exports: [ChangePasswordPage]\n})\nexport class ChangePasswordPageModule { }\n\n\n\n// WEBPACK FOOTER //\n// ./src/spa/+screens/AccountManagement/changePassword/changePassword.module.ts","import {\r\n    Directive\r\n} from '@angular/core';\r\n\r\nimport {\r\n    NG_VALIDATORS,\r\n    Validator,\r\n    AbstractControl,\r\n    Validators,\r\n    ValidatorFn\r\n} from '@angular/forms';\r\nimport {AppConfig as app} from \"../appConfig\";\r\nlet errorMessage = {\r\n    'passwordInvalid': app.Configuration.ContentMessage.password_invalid_characters\r\n};\r\n\r\nexport function passwordValidator(): ValidatorFn {\r\n    return (control: AbstractControl): { [key: string]: any } => {\r\n        const passwordInput = control.value;\r\n        let message = errorMessage.passwordInvalid;\r\n        let regex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[$@!%*#?&.,Â£()=+\"])[\\w$@!%*#?&.,Â£()=+\"]{8,}$/;\r\n        \r\n        let passwordPolicy = localStorage.getItem('password-policy');\r\n        if(passwordPolicy){\r\n           try {\r\n               let policyStr = passwordPolicy;\r\n               let policy = JSON.parse(policyStr);\r\n           } catch (e) {\r\n           }\r\n        }    \r\n        var error = regex.test(passwordInput) ? null : { passwordInvalid: message };\r\n        return error;\r\n    };\r\n}\r\n\r\n\r\n@Directive({\r\n    selector: '[validatorPassword]',\r\n    providers: [\r\n        {\r\n            provide: NG_VALIDATORS,\r\n            useExisting: ValidatorPasswordDirective,\r\n            multi: true\r\n        }\r\n    ]\r\n})\r\n\r\nexport class ValidatorPasswordDirective implements Validator {\r\n    private valFn = Validators.nullValidator;\r\n    constructor() {\r\n        this.valFn = passwordValidator();\r\n    }\r\n\r\n    validate(control: AbstractControl): { [key: string]: any } {\r\n        return this.valFn(control);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/spa/framework/validations/validator-password.directive.ts","import { Component, ViewChildren, QueryList } from '@angular/core';\nimport {IonicPage, AlertController, NavController, TextInput} from 'ionic-angular';\nimport {FormBuilder, FormGroup} from '@angular/forms';\nimport {requireValidator} from '../../../framework/validations/validator-required.directive';\nimport {ChangePasswordService} from \"./changePassword.service\";\nimport {checkMatchWith} from '../../../framework/validations/validator-passwordMatch.directive';\nimport {passwordValidator} from \"../../../framework/validations/validator-password.directive\";\nimport {LoadingIndicatorService} from \"../../../framework/services/loadingIndicatorService/loadingIndicator.service\";\nimport {ToastMessageService} from \"../../../framework/services/toastMessageService/toastMessage.service\";\nimport {RouteManagerService} from \"../../../framework/services/routeManager/routeManager.service\";\nimport {LogoutDataService} from \"../../../framework/login/logoutData.service\";\nimport {AuththenticationGuardService} from \"../../../framework/login/authenticationGuard.service\";\nimport {AppConfig as app} from \"../../../framework/appConfig\";\nimport $ from 'jquery';\n\n@IonicPage()\n@Component({\n  selector: 'page-changePassword',\n  templateUrl: 'changePassword.html',\n  providers: [\n    ChangePasswordService,\n    LogoutDataService,\n    AuththenticationGuardService\n  ]\n})\nexport class ChangePasswordPage {\n  model: any = {};\n  @ViewChildren(TextInput) textInputs: QueryList<TextInput>;\n\n  constructor(private formBuilder: FormBuilder,\n              public routeManager: RouteManagerService,\n              public alertCtrl: AlertController,\n              private changePasswordService: ChangePasswordService,\n              public navCtrl: NavController) {\n    this.model = {\n      passwordPolicy: ''\n    }\n    this.buildForm();\n    this.getMessageValidate();\n    this.isSendingRequest = false;\n  }\n\n  changePasswordForm: FormGroup;\n  formErrors = {\n    'oldPassword': '',\n    'newPassword': '',\n    'confirmNewPassword': ''\n  };\n\n  updateSuccessfullMSG = '';\n  ionViewWillEnter() {\n    $('.app-root').addClass('not-show-tab');\n    this.getContentSuccessfull();\n  }\n\n  buildForm() {\n    this.changePasswordForm = this.formBuilder.group({\n        'oldPassword': ['', [\n          requireValidator('Password'),\n        ]],\n        'newPassword': ['', [\n          requireValidator('Password'),\n          passwordValidator()\n        ]],\n        'confirmNewPassword': ['', [\n          requireValidator('Password'),\n        ]]\n      },{\n        validator: {\n          validators:  checkMatchWith('newPassword', 'confirmNewPassword'),\n          updateOn: 'blur'\n        }\n      });\n\n    this.changePasswordForm.statusChanges.subscribe(() => {\n      if (this.textInputs) {\n        this.textInputs.forEach(input => input && input._inputUpdated && input._inputUpdated());\n      }\n    });\n\n  }\n\n  getMessageValidate() {\n    LoadingIndicatorService.getInstance().showLoadingIndicator();\n    const observer = {\n      next: (res) => {\n        if (!res.ok) {\n          return;\n        }\n        if (res.response !== null) {\n          this.model.passwordPolicy = res.response.passwordPolicyFriendlyMessage;\n        }\n      },\n      error: (error) => {\n        LoadingIndicatorService.getInstance().hideLoadingIndicator();\n      },\n      complete: () => {\n        LoadingIndicatorService.getInstance().hideLoadingIndicator();\n      }\n    };\n    this.changePasswordService\n      .getPasswordPolicy()\n      .subscribe(observer);\n  }\n\n  updatePassword() {\n    if (this.changePasswordForm.valid) {\n      this.isSendingRequest = true;\n      let passwordInfor = {\n        \"currentPassword\": this.changePasswordForm.value.oldPassword,\n        \"newPassword\": this.changePasswordForm.value.newPassword\n      };\n      LoadingIndicatorService.getInstance().showLoadingIndicator();\n      const observer = {\n        next: (res) => {\n          LoadingIndicatorService.getInstance().hideLoadingIndicator();\n          if (!res.ok) {\n            return;\n          }\n          ToastMessageService.getInstance().showToastMessage(this.updateSuccessfullMSG);\n          this.navCtrl.pop();\n        },\n        error: (error) => {\n          this.isSendingRequest = false;\n          LoadingIndicatorService.getInstance().hideLoadingIndicator();\n        }\n      };\n      this.changePasswordService\n        .changePassword(passwordInfor)\n        .subscribe(observer);\n    }\n  }\n\n  isSendingRequest: boolean = false;\n  disableUpdateButton() {\n    return !this.changePasswordForm.valid || this.isSendingRequest;\n  }\n\n    public getContentSuccessfull() {\n        LoadingIndicatorService.getInstance().showLoadingIndicator();\n        const observer = {\n            next: (res) => {\n                if (!res.ok) {\n                    return;\n                }\n                let body = res.response;\n                this.updateSuccessfullMSG = body.message;\n            },\n            error: (error) => {\n                LoadingIndicatorService.getInstance().hideLoadingIndicator();\n            },\n            complete: () => {\n                LoadingIndicatorService.getInstance().hideLoadingIndicator();\n            }\n        };\n        this.changePasswordService\n            .getContentFromRetreiveContent('password-updated')\n            .subscribe(observer);\n    }\n\n  errorMessage(path: string) {\n    const control = this.changePasswordForm.get(path);\n    const requiredMsg = app.Configuration.ContentMessage.required;\n    if (control.valid) {\n      return '';\n    }\n\n    if (path === 'oldPassword' || path === 'newPassword' || path === 'confirmNewPassword') {\n      if (control.hasError('required')) {\n        return control.getError('required');\n      } else {\n        if (control.hasError('passwordInvalid')) {\n          return control.getError('passwordInvalid')\n        }\n\n        if (control.hasError('notEquivalent')) {\n          return control.getError('notEquivalent')\n        }\n      }\n    }\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/spa/+screens/AccountManagement/changePassword/changePassword.ts","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport {HttpService} from \"../../../framework/services/httpService/http.service\";\n\n@Injectable()\nexport class ChangePasswordService {\n  constructor(\n    private http: HttpService\n  ) {\n  }\n\n  getPasswordPolicy(): Observable<any> {\n    return this.http.get(\"account/password-policy\");\n  }\n\n  changePassword(password): Observable<any> {\n    return this.http.put(\"account/password\", password);\n  }\n\n  getContentFromRetreiveContent(code): Observable<any> {\n      return this.http.get('cms/message/code=' + code);\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/spa/+screens/AccountManagement/changePassword/changePassword.service.ts","import {\n    FormGroup\n} from '@angular/forms';\nimport {AppConfig as app} from \"../appConfig\";\nexport function checkMatchWith(field: string, confirmField: string) {\n    return (group: FormGroup) => {\n        let fieldInput = group.controls[field],\n            confirmationInput = group.controls[confirmField];\n        if (fieldInput.value !== confirmationInput.value) {\n            return confirmationInput.setErrors({ notEquivalent: errorMessage() })\n        }\n        else {\n            return confirmationInput.setErrors(null);\n        }\n    }\n}\n\nfunction errorMessage(): string {\n    return app.Configuration.ContentMessage.park_api_password_no_match;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/spa/framework/validations/validator-passwordMatch.directive.ts"],"sourceRoot":""}