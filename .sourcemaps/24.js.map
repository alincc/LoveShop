{"version":3,"sources":["../../src/spa/+screens/AccountManagement/forgotPassword/forgotPassword.module.ts","../../src/spa/framework/validations/validator-maxlengthField.directive.ts","../../src/spa/framework/validations/validator-minlengthField.directive.ts","../../src/spa/framework/validations/validator-email.directive.ts","../../src/spa/+screens/AccountManagement/forgotPassword/forgotPassword.ts","../../src/spa/+screens/AccountManagement/forgotPassword/forgotPassword.service.ts"],"names":[],"mappings":"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","file":"24.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { IonicPageModule } from 'ionic-angular';\nimport { ForgotPasswordPage } from './forgotPassword';\n\n@NgModule({\n  declarations: [\n    ForgotPasswordPage,\n  ],\n  imports: [\n    IonicPageModule.forChild(ForgotPasswordPage),\n  ],\n  exports: [\n    ForgotPasswordPage\n  ]\n})\nexport class ForgotPasswordPageModule {}\n\n\n\n// WEBPACK FOOTER //\n// ./src/spa/+screens/AccountManagement/forgotPassword/forgotPassword.module.ts","import {\n    AbstractControl\n} from '@angular/forms';\nimport {AppConfig as app} from \"../appConfig\";\n\nexport function maxlengthFieldValidator(\n    length: number,\n    fieldName: string = 'field'\n) {\n    return (control: AbstractControl): { [key: string]: any } => {\n        const input = control.value;\n        if (input !== null && typeof input !== 'undefined') {\n            return (input.length > length)\n                ? { maxLengthField: errorMessage(fieldName, length) }\n                : null;\n        }\n\n        return null;\n    };\n}\n\nfunction errorMessage(\n    fieldName: string = 'field',\n    length: number\n): string {\n    return `${fieldName} can be no more than ${length} characters in length.`;\n}\n\nexport function maxlengthFieldValidatorPostcode(\n    length: number,\n    fieldName: string = 'field'\n) {\n    return (control: AbstractControl): { [key: string]: any } => {\n        const input = control.value;\n        if (input !== null && typeof input !== 'undefined') {\n            return (input.length > length)\n                ? { maxLengthField: errorMessagePostCode(fieldName, length) }\n                : null;\n        }\n\n        return null;\n    };\n}\n\nfunction errorMessagePostCode(\n    fieldName: string = 'field',\n    length: number\n): string {\n    return app.Configuration.ContentMessage.park_api_invalid_postcode;\n}\n\n\nexport function maxlengthFieldValidatorExtraCard(\n    length: number,\n) {\n    return (control: AbstractControl): { [key: string]: any } => {\n        const input = parseInt(control.value);\n        if (input !== null && typeof input !== 'undefined') {\n            return (input > length)\n                ? { maxLengthField: errorMessageExtraCard(length) }\n                : null;\n        }\n\n        return null;\n    };\n}\n\nfunction errorMessageExtraCard(\n    length\n): string {\n    return `Maximum ${length} extra gift cards.`;\n}\n\nexport function maxlengthFieldValidatorCSC(\n  length: number,\n  fieldName: string = 'field'\n) {\n  return (control: AbstractControl): { [key: string]: any } => {\n    const input = control.value;\n    if (input !== null && typeof input !== 'undefined') {\n      return (input.length > length)\n        ? { maxLengthField: errorMessageCSC(fieldName, length) }\n        : null;\n    }\n\n    return null;\n  };\n}\n\nfunction errorMessageCSC(\n  fieldName: string = 'field',\n  length: number\n): string {\n  // return `The CSC must contain 3 digit numbers.`;\n    return app.Configuration.ContentMessage.cardCsc_less_than_min;\n}\n\nexport function maxlengthFieldValidatorPIN(\n  length: number,\n  fieldName: string = 'field'\n) {\n  return (control: AbstractControl): { [key: string]: any } => {\n    const input = control.value;\n    if (input !== null && typeof input !== 'undefined') {\n      return (input.length > length)\n        ? { maxLengthField: errorMessagePIN(fieldName, length) }\n        : null;\n    }\n\n    return null;\n  };\n}\n\nfunction errorMessagePIN(\n  fieldName: string = 'field',\n  length: number\n): string {\n  return app.Configuration.ContentMessage.PIN_4_digits;\n}\n\n\n\n\n// WEBPACK FOOTER //\n// ./src/spa/framework/validations/validator-maxlengthField.directive.ts","import {\n    Directive,\n    Input,\n    OnChanges,\n    SimpleChanges\n} from '@angular/core';\n\nimport {\n    NG_VALIDATORS,\n    Validators,\n    Validator,\n    ValidatorFn,\n    AbstractControl\n} from '@angular/forms';\nimport {AppConfig as app} from \"../appConfig\";\nexport function minlengthFieldValidator(\n    length: number,\n    fieldName: string = 'field'\n) {\n    return (control: AbstractControl): { [key: string]: any } => {\n        const input = control.value;\n        if (input !== null && typeof input !== 'undefined') {\n            return (input.length < length)\n                ? { minlengthField: errorMessage(fieldName, length) }\n                : null;\n        }\n\n        return null;\n    };\n}\n\nfunction errorMessage(\n    fieldName: string = 'field',\n    length: number\n): string {\n    return `${fieldName} can be no less than ${length} characters in length.`;\n}\n\nexport function minlengthFieldValidatorPostcode(\n    length: number,\n    fieldName: string = 'field'\n) {\n    return (control: AbstractControl): { [key: string]: any } => {\n        const input = control.value;\n        if (input !== null && typeof input !== 'undefined') {\n            return (input.length < length)\n                ? { minlengthField: errorMessagePostCode(fieldName, length) }\n                : null;\n        }\n\n        return null;\n    };\n}\n\nfunction errorMessagePostCode(\n    fieldName: string = 'field',\n    length: number\n): string {\n    return app.Configuration.ContentMessage.park_api_invalid_postcode;\n}\n\n\n\n@Directive({\n    selector: '[minlengthField]',\n    providers: [{\n        provide: NG_VALIDATORS,\n        useExisting: MinlengthFieldValidatorDirective,\n        multi: true\n    }]\n})\n\nexport class MinlengthFieldValidatorDirective implements Validator, OnChanges {\n    @Input() minlengthField: string;\n    valFn: ValidatorFn = Validators.nullValidator;\n    constructor() { }\n\n    ngOnChanges(changes: SimpleChanges) {\n        const change = changes['minlengthField'];\n        if (change) {\n            this.valFn = minlengthFieldValidator(parseInt(change.currentValue, 0));\n        } else {\n            this.valFn = Validators.nullValidator;\n        }\n    }\n\n    validate(control: AbstractControl) {\n        return this.valFn(control);\n    }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/spa/framework/validations/validator-minlengthField.directive.ts","import { Directive } from '@angular/core';\nimport {\n    AbstractControl,\n    NG_VALIDATORS,\n    ValidatorFn,\n    Validators,\n    Validator\n} from '@angular/forms';\nimport {AppConfig as app} from \"../appConfig\";\nexport function emailValidator() {\n    return (control: AbstractControl): { [key: string]: any } => {\n        const emailRegex = /^([a-zA-Z0-9_\\-\\.]+)@([a-zA-Z0-9_\\-\\.]+)\\.([a-zA-Z]{2,5})$/;\n        if (!emailRegex.test(control.value))\n        {\n            return { email: errorMessage() }\n        }   \n        \n        return null;\n    };\n}\n\nfunction errorMessage() {\n    return app.Configuration.ContentMessage.email_invalid_email;\n}\n\n\n@Directive({\n    selector: '[isEmail]',\n    providers: [{\n        provide: NG_VALIDATORS,\n        useExisting: EmailValidatorDirective,\n        multi: true\n    }]\n})\n\nexport class EmailValidatorDirective implements Validator {\n    valFn: ValidatorFn = Validators.nullValidator;\n    constructor() {\n        this.valFn = emailValidator();\n    }\n\n    validate(control: AbstractControl) {\n        return this.valFn(control);\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/spa/framework/validations/validator-email.directive.ts","import {Component, QueryList, ViewChildren} from '@angular/core';\nimport {IonicPage, NavController, TextInput} from 'ionic-angular';\nimport {FormBuilder, FormGroup} from '@angular/forms';\nimport {emailValidator} from '../../../framework/validations/validator-email.directive';\nimport {requireValidator} from '../../../framework/validations/validator-required.directive';\nimport {LoadingIndicatorService} from '../../../framework/services/loadingIndicatorService/loadingIndicator.service';\nimport {ForgotPasswordService} from './forgotPassword.service';\nimport {RouteManagerService} from \"../../../framework/services/routeManager/routeManager.service\";\nimport {minlengthFieldValidator} from \"../../../framework/validations/validator-minlengthField.directive\";\nimport {maxlengthFieldValidator} from \"../../../framework/validations/validator-maxlengthField.directive\";\nimport {Utils} from \"../../../framework/services/utilities/utilities\";\nimport {Observable} from 'rxjs/Observable';\nimport {AppConfig as app} from \"../../../framework/appConfig\";\n@IonicPage()\n@Component({\n    selector: 'page-forgotPassword',\n    templateUrl: 'forgotPassword.html',\n    providers: [\n        ForgotPasswordService,\n    ]\n})\nexport class ForgotPasswordPage {\n    model: any = {};\n    @ViewChildren(TextInput) textInputs: QueryList<TextInput>;\n\n    constructor(private formBuilder: FormBuilder,\n                public routerManager: RouteManagerService,\n                public navCtrl: NavController,\n                private forgotPasswordService: ForgotPasswordService) {\n        this.model = {\n            emailAddress: \"\",\n        };\n\n        this.buildForm(this.model);\n    }\n\n    forgotPassword: FormGroup;\n    formErrors = {\n        'emailAddress': '',\n    };\n    forgot_password_enter_email_address_below = \"\";\n\n    ionViewWillEnter() {\n      this.getContentMSG();\n    }\n\n    public buildForm(user) {\n        this.forgotPassword = this.formBuilder.group({\n            'emailAddress': [user.emailAddress, [\n                requireValidator('E-mail address'),\n                minlengthFieldValidator(6, 'Email'),\n                maxlengthFieldValidator(81, 'Email'),\n                emailValidator()\n            ]],\n        }, {\n            validator: {\n                updateOn: 'blur'\n            }\n        });\n\n        this.forgotPassword.statusChanges.subscribe(() => {\n            if (this.textInputs) {\n                this.textInputs.forEach(input => input && input._inputUpdated && input._inputUpdated());\n            }\n        });\n\n    }\n\n\n    submitForgotPassword() {\n        if (this.forgotPassword.valid) {\n            LoadingIndicatorService.getInstance().showLoadingIndicator();\n            const observer = {\n                next: (res) => {\n                    if (!res.ok) {\n                        return;\n                    }\n                    this.navCtrl.push(\"ForgotPasswordSuccess\");\n                },\n                error: (error) => {\n                    LoadingIndicatorService.getInstance().hideLoadingIndicator();\n                },\n                complete: () => {\n                    LoadingIndicatorService.getInstance().hideLoadingIndicator();\n                }\n            };\n            this.forgotPasswordService\n                .forgotPassword(this.forgotPassword.value)\n                .subscribe(observer);\n        }\n    }\n\n\n  public getContentMSG() {\n    const observer = {\n      next: (res) => {\n        if (Utils.isNotNull(res[0]) && Utils.isNotNull(res[0].response) && Utils.isNotNull(res[0].response.message)) {\n          app.Configuration.ContentMessage.forgot_password_success_email_sent = res[0].response.message;\n        }\n\n        if (Utils.isNotNull(res[1]) && Utils.isNotNull(res[1].response) && Utils.isNotNull(res[1].response.message)) {\n          app.Configuration.ContentMessage.forgot_password_enter_email_address_below = res[1].response.message;\n          this.forgot_password_enter_email_address_below = app.Configuration.ContentMessage.forgot_password_enter_email_address_below;\n        }\n\n      },\n      error: (error) => {\n      },\n      complete: () => {\n      }\n    };\n    Observable.combineLatest(\n      this.forgotPasswordService.getContentFromRetreiveContent(\"forgot-password.success.email-sent\"),\n      this.forgotPasswordService.getContentFromRetreiveContent(\"forgot-password-enter-email-address-below\"),\n    ).subscribe(observer)\n  }\n\n\n  errorMessage(path: string) {\n        const control = this.forgotPassword.get(path);\n        const requiredMsg = app.Configuration.ContentMessage.required;\n        if (control.valid) {\n            return '';\n        }\n\n        if (path === 'emailAddress' || path === 'password') {\n            if (control.hasError('required')) {\n                return control.getError('required');\n            } else {\n\n\n                if (control.hasError('minlengthField')) {\n                    return control.getError('minlengthField')\n                }\n\n                if (control.hasError('maxLengthField')) {\n                    return control.getError('maxLengthField')\n                }\n                if (control.hasError('email')) {\n                    return control.getError('email')\n                }\n            }\n        }\n    }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/spa/+screens/AccountManagement/forgotPassword/forgotPassword.ts","import {Injectable} from '@angular/core';\nimport {Observable} from 'rxjs/Observable';\nimport {HttpService} from \"../../../framework/services/httpService/http.service\";\n\n@Injectable()\nexport class ForgotPasswordService {\n  constructor(private http: HttpService) {\n  }\n\n  forgotPassword(email): Observable<any> {\n    return this.http.post(\"account/password/reset\", email);\n  }\n\n  getContentFromRetreiveContent(code): Observable<any> {\n    return this.http.get('cms/message/code=' + code);\n  }\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/spa/+screens/AccountManagement/forgotPassword/forgotPassword.service.ts"],"sourceRoot":""}